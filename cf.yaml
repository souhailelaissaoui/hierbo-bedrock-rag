AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway and Lambda for Hierbo Chatbot V0'

Resources:
  # Lambda Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/BedrockFullAccess

  # Lambda Function
  ChatbotFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          
          def lambda_handler(event, context):
              bedrock = boto3.client('bedrock-runtime')
              
              message = json.loads(event['body'])['message']
              
              response = bedrock.invoke_model(
                  modelId='anthropic.claude-3-sonnet-20240229-v1:0',
                  body=json.dumps({
                      "prompt": message,
                      "max_tokens": 1000
                  })
              )
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': json.dumps({
                      'response': response['body']
                  })
              }

  # API Gateway
  ChatbotAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: HierboChatbotAPI
      Description: API for Hierbo Chatbot

  # API Gateway Method
  ChatbotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotAPI
      ResourceId: !GetAtt ChatbotAPI.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotFunction.Arn}/invocations

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatbotMethod
    Properties:
      RestApiId: !Ref ChatbotAPI

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ChatbotAPI
      StageName: prod

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ChatbotFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatbotAPI}/*/*/*

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ChatbotAPI}.execute-api.${AWS::Region}.amazonaws.com/prod
